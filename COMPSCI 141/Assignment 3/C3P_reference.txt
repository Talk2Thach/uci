set 0, 0                                # set current
set 1, 3                                # set free
jump 29                                 # jump <main>
jumpt 8, D[D[D[0] + 2]] > 2             # <fib> jump <else> if not n <= 2
set D[0] - 1, 1                         # return = 1
set 1, D[0]                             # restore free
set 0, D[D[0] + 1]                      # restore current
jump D[D[1]]                            # jump return point
set D[0] + 4, D[D[D[0] + 2]] - 2        # <else> tmp = n - 2
set 1, D[1] + 1                         # allocate return value
set D[1], 11 + 5                        # set return point
set D[1] + 1, D[0]                      # set dynamic link
set D[1] + 2, D[0] + 4                  # set parameter = current + 4 (tmp#ref)
set 0, D[1]                             # set current
set 1, D[1] + 5                         # set free
jump 3                                  # jump <fib>
set D[0] + 3, D[D[0] + 5]               # local = return value
set D[0] + 4, D[D[D[0] + 2]] - 1        # tmp = n - 1
set 1, D[1] + 1                         # allocate return value
set D[1], 20 + 5                        # set return point
set D[1] + 1, D[0]                      # set dynamic link
set D[1] + 2, D[0] + 4                  # set parameter = current + 4 (tmp#ref)
set 0, D[1]                             # set current
set 1, D[1] + 5                         # set free
jump 3                                  # jump <fib>
set D[0] - 1, D[D[0] + 6] + D[D[0] + 3] # return = return value + local
set 1, D[0]                             # restore free
set 0, D[D[0] + 1]                      # restore current
jump D[D[1]]                            # jump return point
set 2, read                             # <main> get n
set 1, D[1] + 1                         # allocate return value
set D[1], 32 + 5                        # set return point
set D[1] + 1, D[0]                      # set dynamic link
set D[1] + 2, 2                         # set parameter = 2 (n#ref)
set 0, D[1]                             # set current
set 1, D[1] + 5                         # set free
jump 3                                  # jump <fib>
halt                                    # halt
