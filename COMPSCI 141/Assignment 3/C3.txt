set 0, 0                          # current = 0
set 1, 3                          # free = 3
jump 20                           # jump <main>
set D[0] + 2, D[2]                # <c3> n = global
set 2, D[2] - 1                   # global = global - 1
jumpt 10, D[D[0] + 2] != 1        # jump <else> if not n == 1
set D[0] - 1, 1                   # return = 1
set 1, D[0]                       # restore free
set 0, D[D[0] + 1]                # restore current
jump D[D[1]]                      # jump return point
set 1, D[1] + 1                   # <else> allocate return value
set D[1], 12 + 4                  # set return point
set D[1] + 1, D[0]                # set dynamic link
set 0, D[1]                       # set current
set 1, D[1] + 3                   # set free
jump 3                            # jump <c3>
set D[0] - 1, 2 * D[D[0] + 3] + 1 # return = 2 * c3() + 1
set 1, D[0]                       # restore free
set 0, D[D[0] + 1]                # restore current
jump D[D[1]]                      # jump return point
set 2, read                       # <main> get global
set 1, D[1] + 1                   # allocate return value
set D[1], 23 + 4                  # set return point
set D[1] + 1, D[0]                # set dynamic link
set 0, D[1]                       # set current
set 1, D[1] + 3                   # set free
jump 3                            # jump <c3>
set write, D[3]                   # print return value
halt                              # halt
